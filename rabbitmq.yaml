advancedConfiguration: ''
affinity: {}
args: null
auth:
  erlangCookie: ''
  existingErlangSecret: ''
  existingPasswordSecret: ''
  password: admin
  tls:
    autoGenerated: false
    caCertificate: ''
    enabled: false
    existingSecret: ''
    existingSecretFullChain: false
    failIfNoPeerCert: true
    serverCertificate: ''
    serverKey: ''
    sslOptionsVerify: verify_peer
  username: user
clusterDomain: cluster.local
clustering:
  addressType: hostname
  enabled: true
  forceBoot: false
  rebalance: false
command: null
common:
  exampleValue: common-chart
  global:
    cattle:
      clusterId: c-9fsp2
      clusterName: vs
      rkePathPrefix: ''
      rkeWindowsPathPrefix: ''
      systemDefaultRegistry: ''
      url: https://10.4.205.12
    imagePullSecrets: null
    imageRegistry: ''
    storageClass: ''
    systemDefaultRegistry: ''
commonAnnotations: {}
communityPlugins: ''
configuration: >-
  {{- if not .Values.loadDefinition.enabled -}}

  ## Username and password

  ##

  default_user = {{ .Values.auth.username }}

  default_pass = CHANGEME

  {{- end }}

  {{- if .Values.clustering.enabled }}

  ## Clustering

  ##

  cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s

  cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain
  }}

  cluster_formation.node_cleanup.interval = 10

  cluster_formation.node_cleanup.only_log_warning = true

  cluster_partition_handling = autoheal

  {{- end }}

  # queue master locator

  queue_master_locator = min-masters

  # enable guest user

  loopback_users.guest = false

  {{ tpl .Values.extraConfiguration . }}

  {{- if .Values.auth.tls.enabled }}

  ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}

  listeners.ssl.default = {{ .Values.service.tlsPort }}

  ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}

  ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem

  ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem

  ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem

  {{- end }}

  {{- if .Values.ldap.enabled }}

  auth_backends.1 = rabbit_auth_backend_ldap

  auth_backends.2 = internal

  {{- range $index, $server := .Values.ldap.servers }}

  auth_ldap.servers.{{ add $index 1 }} = {{ $server }}

  {{- end }}

  auth_ldap.port = {{ .Values.ldap.port }}

  auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}

  {{- if .Values.ldap.tls.enabled }}

  auth_ldap.use_ssl = true

  {{- end }}

  {{- end }}

  {{- if .Values.metrics.enabled }}

  ## Prometheus metrics

  ##

  prometheus.tcp.port = 9419

  {{- end }}

  {{- if .Values.memoryHighWatermark.enabled }}

  ## Memory Threshold

  ##

  total_memory_available_override_value = {{ include "rabbitmq.toBytes"
  .Values.resources.limits.memory }}

  vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{
  .Values.memoryHighWatermark.value }}

  {{- end }}
containerSecurityContext: {}
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
extraConfiguration: |-
  #default_vhost = {{ .Release.Namespace }}-vhost
  #disk_free_limit.absolute = 50MB
  #load_definitions = /app/load_definition.json
extraContainerPorts: null
extraDeploy: null
extraEnvVars: null
extraEnvVarsCM: ''
extraEnvVarsSecret: ''
extraPlugins: rabbitmq_auth_backend_ldap
extraSecrets: {}
extraSecretsPrependReleaseName: false
extraVolumeMounts: null
extraVolumes: null
fullnameOverride: ''
global:
  imagePullSecrets: null
  imageRegistry: ''
  storageClass: ''
  cattle:
    clusterId: c-9fsp2
    clusterName: vs
    rkePathPrefix: ''
    rkeWindowsPathPrefix: ''
    systemDefaultRegistry: ''
    url: https://10.4.205.12
  systemDefaultRegistry: ''
hostAliases: null
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: null
  registry: docker.io
  repository: bitnami/rabbitmq
  tag: 3.9.5-debian-10-r0
ingress:
  annotations: {}
  certManager: false
  enabled: false
  extraHosts: null
  extraTls: null
  hostname: rabbitmq.local
  ingressClassName: ''
  path: /
  pathType: ImplementationSpecific
  secrets: null
  selfSigned: false
  tls: false
initContainers: null
kubeVersion: ''
ldap:
  enabled: false
  port: '389'
  servers: null
  tls:
    enabled: false
  user_dn_pattern: cn=${username},dc=example,dc=org
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 120
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 20
loadDefinition:
  enabled: false
  existingSecret: ''
logs: '-'
maxAvailableSchedulers: ''
memoryHighWatermark:
  enabled: false
  type: relative
  value: 0.4
metrics:
  enabled: false
  plugins: rabbitmq_prometheus
  podAnnotations:
    prometheus.io/port: '{{ .Values.service.metricsPort }}'
    prometheus.io/scrape: 'true'
  prometheusRule:
    additionalLabels: {}
    enabled: false
    namespace: ''
    rules: null
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    honorLabels: false
    interval: 30s
    namespace: ''
    path: ''
    podTargetLabels: {}
    relabellings: null
    scrapeTimeout: ''
    targetLabels: {}
nameOverride: ''
networkPolicy:
  additionalRules: null
  allowExternal: true
  enabled: false
nodeAffinityPreset:
  key: ''
  type: ''
  values: null
nodeSelector: {}
onlineSchedulers: ''
pdb:
  create: false
  maxUnavailable: ''
  minAvailable: 1
persistence:
  accessMode: ReadWriteOnce
  annotations: {}
  enabled: true
  existingClaim: ''
  selector: {}
  size: 8Gi
  storageClass: ''
  volumes: null
plugins: rabbitmq_management rabbitmq_peer_discovery_k8s
podAffinityPreset: ''
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podManagementPolicy: OrderedReady
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
priorityClassName: ''
rbac:
  create: true
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 20
replicaCount: 1
resources:
  limits: {}
  requests: {}
schedulerName: ''
service:
  annotations: {}
  annotationsHeadless: {}
  distNodePort: ''
  distPort: 25672
  distPortName: dist
  epmdNodePort: ''
  epmdPortName: epmd
  externalIPs: null
  externalTrafficPolicy: Cluster
  extraPorts: null
  labels: {}
  loadBalancerIP: ''
  loadBalancerSourceRanges: null
  managerNodePort: ''
  managerPort: 15672
  managerPortEnabled: true
  managerPortName: http-stats
  metricsNodePort: ''
  metricsPort: 9419
  metricsPortName: metrics
  nodePort: ''
  port: 5672
  portEnabled: true
  portName: amqp
  tlsNodePort: ''
  tlsPort: 5671
  tlsPortName: amqp-ssl
  type: LoadBalancer
serviceAccount:
  create: true
  name: ''
sidecars: null
statefulsetLabels: {}
terminationGracePeriodSeconds: 120
tolerations: null
topologySpreadConstraints: {}
ulimitNofiles: '65536'
updateStrategyType: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: Always
    pullSecrets: null
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r180
  resources:
    limits: {}
    requests: {}
