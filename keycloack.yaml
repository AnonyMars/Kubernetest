affinity: {}
args: null
auth:
  adminPassword: admin
  adminUser: user
  createAdminUser: true
  existingSecret: ''
  existingSecretPerPassword: {}
  managementPassword: ''
  managementUser: manager
  tls:
    autoGenerated: true
    enabled: true
    existingSecret: ''
    jksSecret: ''
    keystoreFilename: ''
    keystorePassword: ''
    resources:
      limits: {}
      requests: {}
    truststoreFilename: ''
    truststorePassword: ''
autoscaling:
  enabled: false
  maxReplicas: 11
  minReplicas: 1
  targetCPU: ''
  targetMemory: ''
cache:
  authOwnersCount: 1
  ownersCount: 1
clusterDomain: cluster.local
command: null
common:
  exampleValue: common-chart
  global:
    cattle:
      clusterId: c-9fsp2
      clusterName: vs
      rkePathPrefix: ''
      rkeWindowsPathPrefix: ''
      systemDefaultRegistry: ''
      url: https://10.4.205.12
    imagePullSecrets: null
    imageRegistry: ''
    storageClass: ''
    systemDefaultRegistry: ''
commonAnnotations: {}
commonLabels: {}
configuration: ''
containerPorts:
  http: 8080
  https: 8443
containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
existingConfigmap: ''
externalDatabase:
  database: bitnami_keycloak
  existingSecret: ''
  host: ''
  password: ''
  port: 5432
  user: bn_keycloak
extraDeploy: null
extraEnvVars: null
extraEnvVarsCM: ''
extraEnvVarsSecret: ''
extraStartupArgs: ''
extraVolumeMounts: null
extraVolumes: null
fullnameOverride: ''
global:
  imagePullSecrets: null
  imageRegistry: ''
  storageClass: ''
  cattle:
    clusterId: c-9fsp2
    clusterName: vs
    rkePathPrefix: ''
    rkeWindowsPathPrefix: ''
    systemDefaultRegistry: ''
    url: https://10.4.205.12
  systemDefaultRegistry: ''
hostAliases: null
image:
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: null
  registry: docker.io
  repository: bitnami/keycloak
  tag: 15.0.2-debian-10-r19
ingress:
  annotations: {}
  apiVersion: ''
  certManager: false
  enabled: false
  existingSecret: ''
  extraHosts: null
  extraTls: null
  hostname: keycloak.local
  ingressClassName: ''
  path: /
  pathType: ImplementationSpecific
  secrets: null
  servicePort: http
  tls: false
initContainers: null
initdbScripts: {}
initdbScriptsConfigMap: ''
keycloakConfigCli:
  annotations:
    helm.sh/hook: post-install,post-upgrade,post-rollback
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
    helm.sh/hook-weight: '5'
  args: null
  backoffLimit: 1
  command: null
  configuration: {}
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  enabled: false
  existingConfigmap: ''
  extraEnvVars: null
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: null
  extraVolumes: null
  hostAliases: null
  image:
    pullPolicy: IfNotPresent
    pullSecrets: null
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 4.2.0-debian-10-r29
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  resources:
    limits: {}
    requests: {}
kubeVersion: ''
lifecycleHooks: {}
livenessProbe:
  enabled: true
  failureThreshold: 3
  httpGet:
    path: /auth/
    port: http
  initialDelaySeconds: 300
  periodSeconds: 1
  successThreshold: 1
  timeoutSeconds: 5
metrics:
  enabled: false
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.port }}'
      prometheus.io/scrape: 'true'
    port: 9990
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    honorLabels: false
    interval: 30s
    namespace: ''
    relabellings: null
    scrapeTimeout: ''
nameOverride: ''
networkPolicy:
  additionalRules: {}
  allowExternal: true
  enabled: false
nodeAffinityPreset:
  key: ''
  type: ''
  values: null
nodeSelector: {}
pdb:
  create: false
  maxUnavailable: ''
  minAvailable: 1
podAffinityPreset: ''
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
  enabled: true
  fsGroup: 1001
postgresql:
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ''
    logTimezone: ''
    pgAuditLog: ''
    pgAuditLogCatalog: 'off'
  common:
    exampleValue: common-chart
    global:
      cattle:
        clusterId: c-9fsp2
        clusterName: vs
        rkePathPrefix: ''
        rkeWindowsPathPrefix: ''
        systemDefaultRegistry: ''
        url: https://10.4.205.12
      imagePullSecrets: null
      imageRegistry: ''
      postgresql:
        existingSecret: ''
        postgresqlDatabase: ''
        postgresqlPassword: ''
        postgresqlUsername: ''
        replicationPassword: ''
        servicePort: ''
      storageClass: ''
      systemDefaultRegistry: ''
  commonAnnotations: {}
  configurationConfigMap: ''
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  diagnosticMode:
    args:
      - infinity
    command:
      - sleep
    enabled: false
  enabled: true
  existingSecret: ''
  extendedConfConfigMap: ''
  extraDeploy: null
  extraEnv: null
  extraEnvVarsCM: ''
  fullnameOverride: ''
  global:
    cattle:
      clusterId: c-9fsp2
      clusterName: vs
      rkePathPrefix: ''
      rkeWindowsPathPrefix: ''
      systemDefaultRegistry: ''
      url: https://10.4.205.12
    imagePullSecrets: null
    imageRegistry: ''
    postgresql:
      existingSecret: ''
      postgresqlDatabase: ''
      postgresqlPassword: ''
      postgresqlUsername: ''
      replicationPassword: ''
      servicePort: ''
    storageClass: ''
    systemDefaultRegistry: ''
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: null
    registry: docker.io
    repository: bitnami/postgresql
    tag: 11.13.0-debian-10-r25
  initdbPassword: ''
  initdbScripts: {}
  initdbScriptsConfigMap: ''
  initdbScriptsSecret: ''
  initdbUser: ''
  ldap:
    baseDN: ''
    bindDN: ''
    bind_password: ''
    enabled: false
    port: ''
    prefix: ''
    scheme: ''
    search_attr: ''
    search_filter: ''
    server: ''
    suffix: ''
    tls: ''
    url: ''
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    customMetrics: {}
    enabled: false
    extraEnvVars: null
    image:
      pullPolicy: IfNotPresent
      pullSecrets: null
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.10.0-debian-10-r53
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ''
      rules: null
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources: {}
    securityContext:
      enabled: false
      runAsUser: 1001
    service:
      annotations:
        prometheus.io/port: '9187'
        prometheus.io/scrape: 'true'
      loadBalancerIP: ''
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ''
      metricRelabelings: null
      namespace: ''
      relabelings: null
      scrapeTimeout: ''
  nameOverride: ''
  networkPolicy:
    allowExternal: true
    enabled: false
    explicitNamespacesSelector: {}
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    mountPath: /bitnami/postgresql
    selector: {}
    size: 8Gi
    storageClass: ''
    subPath: ''
  pgHbaConfiguration: ''
  postgresqlConfiguration: {}
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlDatabase: bitnami_keycloak
  postgresqlDbUserConnectionLimit: ''
  postgresqlExtendedConf: {}
  postgresqlInitdbArgs: ''
  postgresqlInitdbWalDir: ''
  postgresqlMaxConnections: ''
  postgresqlPassword: ''
  postgresqlPghbaRemoveFilters: ''
  postgresqlPostgresConnectionLimit: ''
  postgresqlPostgresPassword: ''
  postgresqlSharedPreloadLibraries: pgaudit
  postgresqlStatementTimeout: ''
  postgresqlTcpKeepalivesCount: ''
  postgresqlTcpKeepalivesIdle: ''
  postgresqlTcpKeepalivesInterval: ''
  postgresqlUsername: bn_keycloak
  primary:
    affinity: {}
    annotations: {}
    extraInitContainers: null
    extraVolumeMounts: null
    extraVolumes: null
    labels: {}
    nodeAffinityPreset:
      key: ''
      type: ''
      values: null
    nodeSelector: {}
    podAffinityPreset: ''
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    priorityClassName: ''
    service:
      clusterIP: ''
      nodePort: ''
      type: ''
    sidecars: null
    tolerations: null
  primaryAsStandBy:
    enabled: false
    primaryHost: ''
    primaryPort: ''
  psp:
    create: false
  rbac:
    create: false
  readReplicas:
    affinity: {}
    annotations: {}
    extraInitContainers: null
    extraVolumeMounts: null
    extraVolumes: null
    labels: {}
    nodeAffinityPreset:
      key: ''
      type: ''
      values: null
    nodeSelector: {}
    persistence:
      enabled: true
    podAffinityPreset: ''
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    priorityClassName: ''
    resources: {}
    service:
      clusterIP: ''
      nodePort: ''
      type: ''
    sidecars: null
    tolerations: null
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    readReplicas: 1
    singleService: true
    synchronousCommit: 'off'
    uniqueServices: false
    user: repl_user
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
  schedulerName: ''
  securityContext:
    enabled: true
    fsGroup: 1001
  service:
    annotations: {}
    clusterIP: ''
    loadBalancerIP: ''
    loadBalancerSourceRanges: null
    nodePort: ''
    port: 5432
    type: ClusterIP
  serviceAccount:
    autoMount: false
    enabled: false
    name: ''
  shmVolume:
    chmod:
      enabled: true
    enabled: true
    sizeLimit: ''
  startupProbe:
    enabled: false
    failureThreshold: 10
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5
  terminationGracePeriodSeconds: ''
  tls:
    autoGenerated: false
    certCAFilename: ''
    certFilename: ''
    certKeyFilename: ''
    certificatesSecret: ''
    crlFilename: ''
    enabled: false
    preferServerCiphers: true
  updateStrategy:
    type: RollingUpdate
  usePasswordFile: false
  volumePermissions:
    enabled: false
    image:
      pullPolicy: Always
      pullSecrets: null
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r185
    securityContext:
      runAsUser: 0
priorityClassName: ''
proxyAddressForwarding: false
rbac:
  create: false
  rules: null
readinessProbe:
  enabled: true
  failureThreshold: 3
  httpGet:
    path: /auth/realms/master
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
replicaCount: 1
resources:
  limits: {}
  requests: {}
service:
  annotations: {}
  clusterIP: ''
  externalTrafficPolicy: Cluster
  httpsPort: 443
  loadBalancerIP: ''
  loadBalancerSourceRanges: null
  nodePorts:
    http: ''
    https: ''
  port: 80
  type: LoadBalancer
serviceAccount:
  create: true
  name: ''
serviceDiscovery:
  enabled: false
  properties: null
  protocol: kubernetes.KUBE_PING
  transportStack: tcp
sidecars: null
tolerations: null
updateStrategy:
  type: RollingUpdate
